{"version":3,"file":"static/js/957.ea721bc3.chunk.js","mappings":"sIAAA,SAASA,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CACIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CACe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACTC,EAAOC,UACT,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GACzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CACA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CACAjB,OAAMkB,EACR,GACF,CACF,C,+KC7BaC,EAAM,+BACNC,EAAU,mCACVC,EAAY,kCAElB,SAAeC,IAAtB,4CAAO,OAAP,cAAO,oGACaC,MAAM,GAAD,OAAIJ,EAAJ,uCAAsCC,IADxD,cACCI,EADD,gBAEQA,EAAIC,OAFZ,0GAKA,SAAeC,EAAtB,iDAAO,OAAP,cAAO,WAA8BC,EAAMC,GAApC,uFACaL,MAAM,GAAD,OAAIJ,EAAJ,iCAAgCC,EAAhC,kBAAiDQ,EAAjD,iBAA+DD,IADjF,cACCH,EADD,gBAEQA,EAAIC,OAFZ,0GAKA,SAAeI,EAAtB,+CAAO,OAAP,cAAO,WAA2BC,GAA3B,uFACaP,MAAM,GAAD,OAAIJ,EAAJ,kBAAiBW,EAAjB,oBAA+BV,IADjD,cACCI,EADD,gBAEQA,EAAIC,OAFZ,0GAKA,SAAeM,EAAtB,+CAAO,OAAP,cAAO,WAA2BD,GAA3B,uFACaP,MAAM,GAAD,OAAIJ,EAAJ,kBAAiBW,EAAjB,4BAAuCV,IADzD,cACCI,EADD,gBAEQA,EAAIC,OAFZ,0GAKA,SAAeO,EAAtB,+CAAO,OAAP,cAAO,WAA8BF,GAA9B,uFACaP,MAAM,GAAD,OAAIJ,EAAJ,kBAAiBW,EAAjB,4BAAuCV,IADzD,cACCI,EADD,gBAEQA,EAAIC,OAFZ,0G,0ICtBMQ,EAAOC,EAAAA,EAAAA,GAAH,sD,SCGJC,EAAW,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAQvC,OAAO,UAACL,EAAD,YACL,gBAAKM,IANDH,EACI,GAAN,OAAUf,EAAAA,IAAV,OAAsBe,GAEjBI,EAGeC,IAAKJ,KAC3B,kCAAUA,MACV,wCAAgBC,OAEnB,EChBYI,EAAUR,EAAAA,EAAAA,GAAH,kJCKL,SAASS,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAQR,OANAE,EAAAA,EAAAA,YAAU,WACJF,IACFhB,EAAAA,EAAAA,IAAYgB,GAAStC,MAAK,SAAAyC,GAAK,OAAIJ,EAAUI,EAAMC,KAApB,GAElC,GAAE,CAACJ,KAEG,0BACL,UAACL,EAAD,WACqB,IAAlBG,EAAOO,SAAgB,2EACvBP,GAAUA,EAAOQ,KAAI,YAA0C,IAAxCvB,EAAuC,EAAvCA,GAAIwB,EAAmC,EAAnCA,aAAcjB,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,UAC9C,OAAO,SAACH,EAAD,CACLC,OAAQkB,EACRjB,KAAMA,EACNC,UAAWA,GAHSR,EAKvB,QAIN,C","sources":["../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","components/API.js","components/CastCard/CastCard.styled.jsx","components/CastCard/CastCard.jsx","pages/Cast/Cast.styled.jsx","pages/Cast/Cast.jsx"],"sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","export const URL = 'https://api.themoviedb.org/3';\nexport const API_KEY = '86ff1474d02492b68b238125fe79bb52';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport async function getTrends() {\n  const res = await fetch(`${URL}/trending/movie/day?api_key=${API_KEY}`);\n  return await res.json();\n}\n\nexport async function getFilmByQuery(page, query) {\n  const res = await fetch(`${URL}/search/movie?api_key=${API_KEY}&query=${query}&page=${page}`);\n  return await res.json();\n}\n\nexport async function getFilmById(id) {\n  const res = await fetch(`${URL}/movie/${id}?api_key=${API_KEY}`);\n  return await res.json();\n}\n\nexport async function getCastById(id) {\n  const res = await fetch(`${URL}/movie/${id}/credits?api_key=${API_KEY}`);\n  return await res.json();\n}\n\nexport async function getReviewsById(id) {\n  const res = await fetch(`${URL}/movie/${id}/reviews?api_key=${API_KEY}`);\n  return await res.json();\n}","import styled from \"@emotion/styled\";\n\nexport const Item = styled.li`\ndisplay: block;\nwidth: 300px;`","import { IMAGE_URL } from \"components/API\";\nimport image from '../../images/persone.jpg';\nimport { Item } from \"./CastCard.styled\";\n\n\nexport const CastCard = ({ poster, name, character }) => {\n  \n  const imageSrc = () => {\n    if (poster) {\n      return `${IMAGE_URL}${poster}`\n    }\n    return image\n  };\n  return <Item>\n    <img src={imageSrc()} alt={name} />\n    <p>Name: {name}</p>\n    <p> Character: {character}</p>\n</Item>\n}","import styled from \"@emotion/styled\";\n\nexport const Gallery = styled.ul`\nlist-style: none;\ndisplay: grid;\ngap: 24px;\ngrid-template-columns: 300px 300px 300px 300px;\njustify-content: center;\n`;\n","import { useState, useEffect } from \"react\";\nimport { getCastById } from \"components/API\";\nimport { useParams } from \"react-router-dom\";\nimport { CastCard } from \"components/CastCard/CastCard\";\nimport { Gallery } from \"./Cast.styled\";\n\n\nexport default function Cast() {\n  const [actors, setActors] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (movieId) {\n      getCastById(movieId).then(array => setActors(array.cast))\n    }\n  }, [movieId])\n\n  return <div>\n    <Gallery>\n      {actors.length === 0 && <p>Sorry! We have no information about the actors.</p>}\n      {actors && actors.map(({id, profile_path, name, character}) => {\n        return <CastCard key={id}\n          poster={profile_path}\n          name={name}\n          character={character}\n        />\n      })}\n    </Gallery>\n    \n  </div>\n}"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","URL","API_KEY","IMAGE_URL","getTrends","fetch","res","json","getFilmByQuery","page","query","getFilmById","id","getCastById","getReviewsById","Item","styled","CastCard","poster","name","character","src","image","alt","Gallery","Cast","useState","actors","setActors","movieId","useParams","useEffect","array","cast","length","map","profile_path"],"sourceRoot":""}